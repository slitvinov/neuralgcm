/* Coefficient tables as lists of lists */
a_ex : [[1/3], [1/6, 1/2], [1/2, -1/2, 1]];
a_im : [[1/6, 1/6], [1/3, 0, 1/3], [3/8, 0, 3/8, 1/4]];
b_ex : [1/2, -1/2, 1, 0];
b_im : [3/8, 0, 3/8, 1/4];

num_steps : length(b_ex);
C : 1;
nsteps : 16;
dt: 5.0 / nsteps;
y : 1.0;
Trace : [];
istep : 0;

/* Define forcing terms */
F(t, y) := sin(t);
G(t, y) := -C * y;

define(dG(t, 'y), diff(G(t, 'y), 'y));
so: linsolve((1 - 'gamma * dG(t, 'y)) * 'y = 'Y_star, 'y);
define(G_inv('Y_star, 'gamma), rhs(so[1]));

/* Main loop */
while istep < nsteps do (
  push(y, Trace),
  t : dt * istep,
  istep : istep + 1,

  f : makelist(0, i, 1, num_steps),
  g : makelist(0, i, 1, num_steps),

  f[1] : F(t, y),
  g[1] : G(t, y),

  for i : 2 thru num_steps do (
    tau: apply("+", a_ex[i - 1]),
    ex_terms : dt * sum(a_ex[i - 1][j] * f[j], j, 1, i - 1),
    im_terms : dt * sum(a_im[i - 1][j] * g[j], j, 1, i - 1),
    Y_star : y + ex_terms + im_terms,
    Y : G_inv(Y_star, dt * a_im[i - 1][i]),
    f[i] : F(t + dt * tau, Y),
    g[i] : G(t + dt * tau, Y)),
  ex_terms : dt * sum(b_ex[j] * f[j], j, 1, num_steps),
  im_terms : dt * sum(b_im[j] * g[j], j, 1, num_steps),
  y : y + ex_terms + im_terms);

Trace: reverse(Trace);
f_analytical(t) := block(
    [p : C^2, q : exp(C * t)],
    return ((C * q * sin(t) - q * cos(t) + p + 2) / ((p + 1) * q))
);

load(draw)$
draw2d(
    point_type = filled_circle,
    points(makelist([dt * (i - 1), Trace[i]], i, 1, length(Trace))),
    points_joined = true,
    color = red,
    explicit(f_analytical('t), 't, 0, dt * nsteps)
);
